[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "quackcore"
version = "0.1.0"
description = "Core infrastructure for the Quack ecosystem of media production tools"
readme = "README.md"
requires-python = ">=3.13"
license = { text = "MIT" }
authors = [
    { name = "Rod Rivera", email = "rod@aiproduct.engineer" }
]
keywords = [
    "automation",
    "content-creation",
    "media-production",
    "workflows",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pydantic>=2.6.0",
    "pyyaml>=6.0.1",
    "rich>=13.6.0",
    "google-api-python-client>=2.0.0",
    "google-auth-httplib2>=0.1.0",
    "google-auth-oauthlib>=0.4.0",
    "tqdm",
    "Jinja2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "isort",
    "hatchling",
    "black>=23.0.0",
    "hypothesis",
    "python-docx"
]
gmail = [
    "google-api-python-client>=2.0.0",
    "google-auth-httplib2>=0.1.0",
    "google-auth-oauthlib>=0.4.0",
]
notion = [
    "notion-client>=1.0.0",
]
google = [
    "google-api-python-client>=2.0.0",
    "google-auth-httplib2>=0.1.0",
    "google-auth-oauthlib>=0.4.0",
]
# Optional dependency for Google Drive
drive = [
    "google-api-python-client>=2.0.0",
    "google-auth-httplib2>=0.1.0",
    "google-auth-oauthlib>=0.4.0",
]
pandoc = ["pypandoc", "beautifulsoup4"]

llms = ['tiktoken', 'openai', 'anthropic']

[project.urls]
"Homepage" = "https://github.com/aipengineer/quackcore"
"Bug Tracker" = "https://github.com/aipengineer/quackcore/issues"

[tool.hatch.version]
path = "src/quackcore/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/quackcore"]

[tool.isort]
profile = "black"
line_length = 88

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "A",   # flake8-builtins
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101"]  # Disable S101 (assert warning) in test files

[tool.black]
line-length = 88
target-version = ["py313"]

[tool.mypy]
python_version = "3.13"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
filterwarnings = ["error"]
addopts = "-v --cov=quackcore --cov-report=term-missing"

[tool.coverage.run]
source = ["quackcore"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[project.entry-points."quackcore.plugins"]
paths = "quackcore.paths.plugin:create_plugin"
fs = "quackcore.fs.plugin:create_plugin"
config = "quackcore.config.plugin:create_plugin"